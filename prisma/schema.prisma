generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model User {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supervisorId   String?       @db.Uuid
  roleId         String        @db.Uuid
  name           String
  identification String        @unique
  hashedPassword       String
  phone          String
  email          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  stateId        String        @db.Uuid @default("975c46bb-456e-4869-9584-7aedfa5df92f")
  appointments   Appointment[]
  records        Record[]
  role           Role          @relation(fields: [roleId], references: [id])
  state          State         @relation(fields: [stateId], references: [id])
  supervisor     User?         @relation("UserSupervisor", fields: [supervisorId], references: [id])
  supervisees    User[]        @relation("UserSupervisor")

  @@map("users")
}

model Role {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @unique
  description String
  state       State  @relation(fields: [stateId], references: [id])
  users       User[]

  @@map("roles")
}

model State {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String? //Esto se puede borrar
  children    Child[]
  clinics     Clinic[]
  role        Role[]
  users       User[]

  @@map("states")
}

model Guardian {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String
  lastName       String
  identification String           @unique
  email          String           @unique
  phone          String
  address        String
  relationship   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  children       Child[]

  @@map("guardians")
}

model Child {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stateId           String           @db.Uuid
  firstName         String
  lastName          String
  identification    String           @unique
  birthDate         DateTime
  gender            Gender
  nationality       String
  address           String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  vaccinationStatus Boolean
  appointments      Appointment[]
  records           Record[]
  state             State            @relation(fields: [stateId], references: [id])
  guardianChildren  GuardianChild[]

  @@map("children")
}

model GuardianChild {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guardianId  String    @db.Uuid
  childId     String    @db.Uuid
  relationship String
  assignedAt  DateTime  @default(now())

  guardian    Guardian  @relation(fields: [guardianId], references: [id])
  child       Child     @relation(fields: [childId], references: [id])

  @@unique([guardianId, childId])
  @@map("guardian_child")
}


model Vaccine {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  brand       String
  maxDoses    Int
  description String
  ageRangeMin Int?
  ageRangeMax Int?
  stateId     String @db.Uuid @default("975c46bb-456e-4869-9584-7aedfa5df92f")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  records     Record[]

  @@map("vaccines")
}

model Clinic {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @unique
  shortName    String
  address      String
  phone        String
  director     String
  website      String?
  email        String?
  stateId     String @db.Uuid @default("975c46bb-456e-4869-9584-7aedfa5df92f")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  state        State         @relation(fields: [stateId], references: [id])

  @@map("clinics")
}

model Child {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stateId           String        @db.Uuid
  guardianId        String        @db.Uuid
  firstName         String
  lastName          String
  identification    String        @unique
  birthDate         DateTime
  gender            Gender
  nationality       String
  address           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  vaccinationStatus Boolean
  appointments      Appointment[]
  guardian          Guardian      @relation(fields: [guardianId], references: [id])
  state             State         @relation(fields: [stateId], references: [id])
  records           Record[]

  @@map("children")
}

model Record {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @db.Uuid
  childId          String   @db.Uuid
  vaccineId        String   @db.Uuid
  recordNumber     String   @unique
  dateApplied      DateTime @default(now())
  dosesApplied     Int
  childAgeAtMoment Int
  signature        Bytes?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  child            Child    @relation(fields: [childId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
  vaccine          Vaccine  @relation(fields: [vaccineId], references: [id])

  @@map("records")
}

model Appointment {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  childId   String           @db.Uuid
  userId    String           @db.Uuid
  clinicId  String           @db.Uuid
  date      DateTime
  appointmentState     AppointmentState @default(PENDING)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  child     Child            @relation(fields: [childId], references: [id])
  clinic    Clinic           @relation(fields: [clinicId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@map("appointments")
}

enum AppointmentState {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}


