// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model User {
  id             String   @id @default(uuid()) @db.Uuid
  supervisor     User?    @relation("UserSupervisor", fields: [supervisorId], references: [id])
  supervisees    User[]   @relation("UserSupervisor")
  supervisorId   String?  @db.Uuid
  state          State    @relation(fields: [stateId], references: [id])
  stateId        String   @db.Uuid
  role           Role     @relation(fields: [roleId], references: [id])
  roleId         String   @db.Uuid
  name           String
  identification String   @unique
  password       String
  phone          String
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  records      Record[]
  appointments Appointment[]

  @@map("users")
}

model Role {
  id          String @id @default(uuid()) @db.Uuid
  state       State  @relation(fields: [stateId], references: [id])
  stateId     String @db.Uuid
  name        String @unique
  description String
  users       User[]

  @@map("roles")
}

model State {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  users       User[]
  children    Child[]
  clinics     Clinic[]
  role        Role[]

  @@map("states")
}

model Guardian {
  id             String   @id @default(uuid()) @db.Uuid
  firstName      String
  lastName       String
  identification String   @unique
  email          String   @unique
  phone          String
  address        String
  relationship   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  children Child[]

  @@map("guardians")
}

model Vaccine {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  brand       String
  maxDoses    Int
  description String
  ageRangeMin Int?
  ageRangeMax Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  records Record[]

  @@map("vaccines")
}

model Clinic {
  id        String   @id @default(uuid()) @db.Uuid
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String   @db.Uuid
  name      String   @unique
  shortName String
  address   String
  phone     String
  director  String
  website   String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("clinics")
}

model Child {
  id             String   @id @default(uuid()) @db.Uuid
  state          State    @relation(fields: [stateId], references: [id])
  stateId        String   @db.Uuid
  guardian       Guardian @relation(fields: [guardianId], references: [id])
  guardianId     String   @db.Uuid
  firstName      String
  lastName       String
  identification String   @unique
  birthDate      DateTime
  gender         Gender
  nationality    String
  address        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  records      Record[]
  appointments Appointment[]

  @@map("children")
}

model Record {
  id               String   @id @default(uuid()) @db.Uuid
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.Uuid
  child            Child    @relation(fields: [childId], references: [id])
  childId          String   @db.Uuid
  vaccine          Vaccine  @relation(fields: [vaccineId], references: [id])
  vaccineId        String   @db.Uuid
  recordNumber     String   @unique
  dateApplied      DateTime @default(now())
  dosesApplied     Int
  childAgeAtMoment Int
  signature        Bytes?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("records")
}

model Appointment {
  id        String           @id @default(uuid()) @db.Uuid
  child     Child            @relation(fields: [childId], references: [id])
  childId   String           @db.Uuid
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
  clinic    Clinic           @relation(fields: [clinicId], references: [id])
  clinicId  String           @db.Uuid
  date      DateTime
  state     AppointmentState @default(PENDING)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("appointments")
}

enum AppointmentState {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}
