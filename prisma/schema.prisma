generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model User {
  idUser             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supervisorId       String?            @db.Uuid
  roleId             String             @db.Uuid
  active             Boolean            @default(true)
  firstName          String
  lastName           String
  identificationType IdentificationType
  identification     String             @unique
  password           String
  phone              String
  email              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  records      Record[]
  role         Role          @relation(fields: [roleId], references: [idRole])
  supervisor   User?         @relation("UserSupervisor", fields: [supervisorId], references: [idUser])
  supervisees  User[]        @relation("UserSupervisor")

  @@map("users")
}

model Role {
  idRole      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active      Boolean @default(true)
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("roles")
}

model Guardian {
  idGuardian         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active             Boolean            @default(true)
  firstName          String
  lastName           String
  identificationType IdentificationType
  identification     String             @unique
  email              String             @unique
  phone              String
  address            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guardianChildren GuardianChild[]

  @@map("guardians")
}

model Child {
  idChild            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active             Boolean            @default(true)
  firstName          String
  lastName           String
  identificationType IdentificationType
  identification     String             @unique
  birthDate          DateTime
  gender             Gender
  nationality        String
  city               String
  municipality       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vaccinationStatus Boolean
  appointments      Appointment[]
  records           Record[]
  guardianChildren  GuardianChild[]

  @@map("children")
}

model GuardianChild {
  idGuardianChild String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active          Boolean      @default(true)
  guardianId      String       @db.Uuid
  childId         String       @db.Uuid
  relationship    Relationship
  assignedAt      DateTime     @default(now())

  guardian Guardian @relation(fields: [guardianId], references: [idGuardian])
  child    Child    @relation(fields: [childId], references: [idChild])

  @@unique([guardianId, childId])
  @@map("guardian_child")
}

model Vaccine {
  idVaccine   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active      Boolean @default(true)
  name        String  @unique
  brand       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records Record[]
  vaccineSchema VaccineSchema[]

  @@map("vaccines")
}

model Clinic {
  idClinic     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active       Boolean @default(true)
  name         String  @unique
  shortName    String
  city         String
  municipality String
  phone        String
  director     String
  website      String?
  email        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("clinics")
}

model Record {
  idRecord         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @db.Uuid
  childId          String   @db.Uuid
  vaccineId        String   @db.Uuid
  active           Boolean  @default(true)
  recordNumber     String   @unique
  dateApplied      DateTime @default(now())
  dosesApplied     Int
  childAgeAtMoment Int
  notes            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  child   Child   @relation(fields: [childId], references: [idChild])
  user    User    @relation(fields: [userId], references: [idUser])
  vaccine Vaccine @relation(fields: [vaccineId], references: [idVaccine])

  @@map("records")
}

model Appointment {
  idAppointment String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  childId       String           @db.Uuid
  userId        String           @db.Uuid
  clinicId      String           @db.Uuid
  active        Boolean          @default(true)
  date          DateTime
  state         AppointmentState @default(PENDING)
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  child  Child  @relation(fields: [childId], references: [idChild])
  clinic Clinic @relation(fields: [clinicId], references: [idClinic])
  user   User   @relation(fields: [userId], references: [idUser])

  @@map("appointments")
}

model VaccineSchema {
  idVaccineSchema String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idVaccine       String @db.Uuid
  name            String
  age             Int
  Description     String
  Doses Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vaccine Vaccine @relation(fields: [idVaccine], references: [idVaccine])
}

enum IdentificationType {
  PASSPORT
  IDCARD
}

enum AppointmentState {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}

enum Relationship {
  MOTHER
  FATHER
  TUTOR
}
